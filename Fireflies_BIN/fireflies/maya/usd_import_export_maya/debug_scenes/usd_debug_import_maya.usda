#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Cube "cube1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    rel material:binding = </materials/mtlxmaterial>
    double size = 2
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Scope "materials"
{
    def Material "mtlxmaterial" (
        prepend inherits = </__class_mtl__/mtlxmaterial>
    )
    {
        token outputs:mtlx:displacement.connect = </materials/mtlxmaterial/mtlxdisplacement.outputs:out>
        token outputs:mtlx:surface.connect = </materials/mtlxmaterial/mtlxstandard_surface.outputs:out>
        token outputs:surface.connect = </materials/mtlxmaterial/mtlxstandard_preview.outputs:surface>

        def Shader "mtlxstandard_surface"
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            float inputs:base (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 1
                        string ogl_diff_intensity = "1"
                    }
                }
            )
            color3f inputs:base_color = (0.8, 0, 0.8) (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double3 default_value = (0.8, 0.8, 0.8)
                        string ogl_diff = "1"
                    }
                }
            )
            color3f inputs:base_color.connect = </materials/mtlxmaterial/mtlxtriplanar1.outputs:out>
            float inputs:coat (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_coat_intensity = "1"
                    }
                }
            )
            float inputs:coat_roughness (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0.1
                        string ogl_coat_rough = "1"
                    }
                }
            )
            float inputs:emission (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_emit_intensity = "1"
                    }
                }
            )
            color3f inputs:emission_color (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double3 default_value = (1, 1, 1)
                        string ogl_emit = "1"
                    }
                }
            )
            float inputs:metalness (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_metallic = "1"
                    }
                }
            )
            float inputs:specular (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 1
                        string ogl_spec_intensity = "1"
                    }
                }
            )
            color3f inputs:specular_color (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double3 default_value = (1, 1, 1)
                        string ogl_spec = "1"
                    }
                }
            )
            float inputs:specular_IOR (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 1.5
                        string ogl_ior = "1"
                    }
                }
            )
            float inputs:specular_roughness (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0.2
                        string ogl_rough = "1"
                    }
                }
            )
            float inputs:transmission (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        double default_value = 0
                        string ogl_transparency = "1"
                    }
                }
            )
            token outputs:out
        }

        def Shader "mtlxtriplanar1"
        {
            uniform token info:id = "ARNOLD_ND_triplanar"
            color3f inputs:input.connect = </materials/mtlxmaterial/mtlximage1.outputs:out>
            color3f outputs:out
        }

        def Shader "mtlximage1"
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @../../maketx_custom/stand/bat_difc_out_rec709.1001_25.png@
            color3f outputs:out
        }

        def Shader "mtlxdisplacement"
        {
            uniform token info:id = "ND_displacement_float"
            token outputs:out
        }

        def Shader "mtlxstandard_preview" (
            customData = {
                bool HoudiniIsAutoCreatedShader = 1
            }
        )
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoatRoughness = 0.1
            color3f inputs:diffuseColor = (0.8, 0, 0.8)
            float inputs:roughness = 0.2
            color3f inputs:specularColor = (1, 1, 1)
            token outputs:surface
        }
    }
}

def Xform "lights"
{
    def DomeLight_1 "domelight1" (
        prepend apiSchemas = ["HoudiniViewportGuideAPI"]
    )
    {
        custom rel filters = None
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 1
        bool inputs:normalize = 0
        float inputs:specular = 1
        asset inputs:texture:file = @@
        token inputs:texture:format = "automatic"
        rel light:filters = None
        token poleAxis = "scene"
        rel portals = None
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

